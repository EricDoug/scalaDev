第七章 内建控制结构
7.1 if表达式
var filename = "defalut.txt"
if(!args.isEmplty)
    filename = args(0)
由于scala的if是有返回值的表达式,以上可改为
var filename = if (!args.isEmpty) args(0) else "defalut.txt"

等效推论(equational reasoning)

7.2 while循环
def gcdLoop(x : Long,y : Long) : Long = {
var a = x
var b = y
while (a != 0){
        val temp = a
        a = b % a
        b = temp
    }
}

//使用函数式编程风格修改
def gcd(x : Long,y:Long) : Long = if(y == 0) x else gcd(y,x % y)

var line = ""
do{
    line = readLine()
    println("Read: " + line)
}while(line != "")
while和do-while结构之所以被称为"循环"，而不是表达式，是因为它们不能产生有意义的结果。
结果类型为Unit,是表明存在并且唯一存在类型Unit的值，称为unit value，写成().
scala> def great() {println("hi")}
great: ()Unit
scala> great() == ()
hi
res2: Boolean = true

7.3 for表达式
a.枚举集合类
val filesHere = (new java.io.File(".")).listFiles
for(file <- filesHere)
    println(file)
to(包括上边界)  until（不包括上边界）

b.过滤
val filesHere = (new java.io.File(".")).listFiles
for(file <- filesHere if file.isFile;if file.getName.endsWith(".scala"))
    println(file)

c.嵌套枚举
d.流间变量绑定
e.制造新的集合

7.4 使用try表达式处理异常
a.抛出异常
throw new IllegalArgumentException

b.捕获异常
try...catch...

c.finally子句
注：出借模式(loan pattern)

d.生成值

7.5 匹配表达式

7.6 不再使用break和continue
尾调用优化查看8.9

7.7 变量范围

7.8 重构指令式风格的代码

